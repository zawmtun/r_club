---
title: "Intro to R"
format: html
editor_options: 
  chunk_output_type: console
---

## Vectors and data types ----

```{r}
weight_g <- c(50, 60, 65, 82)
weight_g

animals <- c("mouse", "rat", "dog")
animals

n <- 2:10
n

length(weight_g)
length(animals)
length(n)

class(weight_g)
class(animals)
class(n)

str(weight_g)
str(animals)
str(n)

weight_g <- c(weight_g, 90) # Add to the end
weight_g

weight_g <- c(weight_g, n)
weight_g

weight_g <- c(30, weight_g) # Add to the beginning
weight_g
```

## Challenge: Vectors and data types

Q: We've seen that atomic vectors can be of type character, numeric (or double), integer, and logical. But what happens if we try to mix these types in a single vector?

Q: What will happen in each of these examples? (hint: use `class()` to check the data type of your objects):

```{r}
num_char <- c(1, 2, 3, "a")
num_char <- c("a", 2, 3, 4)
num_char
class(num_char)

num_logical <- c(1, 2, 3, TRUE)
num_logical

char_logical <- c("a", "b", "c", TRUE)
char_logical
class(char_logical)

tricky <- c(1, 2, 3, "4")
tricky
```

Q: Why do you think it happens?

Q: How many values in `combined_logical` are "TRUE" (as a character) in the following example (reusing the 2 ...\_logicals from above):

```{r}
combined_logical <- c(num_logical, char_logical)
combined_logical
```

Q: You've probably noticed that objects of different types get converted into a single, shared type within a vector. In R, we call converting objects from one class into another class coercion. These conversions happen according to a hierarchy, whereby some types get preferentially coerced into other types. Can you draw a diagram that represents the hierarchy of how these data types are coerced?

logical -\> numeric -\> character \<- logical

## Subsetting vectors ----

Use indices.

```{r}
animals <- c("mouse", "rat", "dog", "cat")
animals[2]
animals[c(3, 2)]
more_animals <- animals[c(1, 2, 3, 2, 1, 4)]
more_animals
```

Use logical vectors.

```{r}
weight_g <- c(21, 34, 39, 54, 55)
weight_g
weight_g[ c(TRUE, FALSE, FALSE, TRUE, TRUE) ]
```


```{r}
my_vector <- c(TRUE, FALSE, FALSE, TRUE, TRUE)
weight_g[my_vector]
```


```{r}
weight_g > 50
```


```{r}
weight_g[weight_g > 50]
```


```{r}
weight_g[weight_g > 30 & weight_g < 50]
```


```{r}
weight_g[weight_g <= 30 | weight_g == 55]
```


```{r}
weight_g[weight_g >= 30 & weight_g == 21]
```


## Challenge: Subsetting vectors

Q: Can you figure out why "four" \> "five" returns TRUE?

```{r}
"four" > "five"
```


## Missing data ----

```{r}
heights <- c(2, 4, 4, NA, 6)
heights
```


```{r}
mean(heights)
mean(heights, na.rm = TRUE)
```


```{r}
max(heights)
max(heights, na.rm = TRUE)
```


## Challenge: Missing data ----

Q: Using this vector of heights in inches, create a new vector, `heights_no_na`, with the NAs removed.

```{r}
heights <- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)
length(heights)
class(heights)

```

Q: Use the function median() to calculate the median of the heights vector.

```{r}
median(heights, na.rm = TRUE)
```

Q: Use R to figure out how many people in the set are taller than 67 inches.

```{r}
is.na(heights)
heights_no_na <- heights[!is.na(heights)]

my_lgl <- heights_no_na > 67
summary(my_lgl)
table(my_lgl)
heights_no_na[my_lgl]
```

